"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_components_potato_PotatoGame_tsx",{

/***/ "(app-pages-browser)/./components/potato/scenes/BouncingBallScene.ts":
/*!*******************************************************!*\
  !*** ./components/potato/scenes/BouncingBallScene.ts ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BouncingBallScene: () => (/* binding */ BouncingBallScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"(app-pages-browser)/./node_modules/phaser/dist/phaser.js\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\nclass BouncingBallScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    preload() {\n        // Create a potato shape as a texture\n        const graphics = this.make.graphics({\n            x: 0,\n            y: 0,\n            add: false\n        });\n        // Draw potato body (oval shape)\n        graphics.fillStyle(0xbf8d30, 1); // Potato brown color\n        graphics.fillEllipse(32, 32, 50, 40);\n        // Add some potato \"eyes\" (small dark spots)\n        graphics.fillStyle(0x6d4c0c, 1); // Darker brown\n        graphics.fillCircle(20, 25, 3);\n        graphics.fillCircle(40, 30, 3);\n        graphics.fillCircle(30, 40, 3);\n        // Generate the texture\n        graphics.generateTexture(\"potato\", 64, 64);\n        // Create heart icon for lives\n        const heartGraphics = this.make.graphics({\n            x: 0,\n            y: 0,\n            add: false\n        });\n        heartGraphics.fillStyle(0xff0000, 1); // Red color\n        heartGraphics.fillCircle(8, 8, 8); // Left circle\n        heartGraphics.fillCircle(24, 8, 8); // Right circle\n        heartGraphics.fillStyle(0xff0000, 1);\n        heartGraphics.fillTriangle(0, 12, 32, 12, 16, 32); // Bottom triangle\n        // Generate heart texture\n        heartGraphics.generateTexture(\"heart\", 32, 32);\n        // Create fire particle texture\n        const fireParticle = this.make.graphics({\n            x: 0,\n            y: 0,\n            add: false\n        });\n        // Create a simple fire particle with color fills\n        fireParticle.fillStyle(0xffffff, 1); // White center\n        fireParticle.fillCircle(8, 8, 2);\n        fireParticle.fillStyle(0xfff700, 0.9); // Yellow\n        fireParticle.fillCircle(8, 8, 4);\n        fireParticle.fillStyle(0xff7a00, 0.8); // Orange\n        fireParticle.fillCircle(8, 8, 6);\n        fireParticle.fillStyle(0xff3700, 0.5); // Red-orange\n        fireParticle.fillCircle(8, 8, 8);\n        // Generate fire particle texture\n        fireParticle.generateTexture('fire', 16, 16);\n    }\n    create() {\n        // Reset game state\n        this.lives = 3;\n        this.score = 0;\n        // Add a potato sprite\n        this.potato = this.physics.add.sprite(this.cameras.main.centerX, this.cameras.main.centerY - 100, \"potato\");\n        // Set the potato's physics properties\n        if (this.potato) {\n            // We'll handle bounds manually in the update method\n            this.potato.setCollideWorldBounds(false);\n            this.potato.setBounce(0.6); // Reduced bounce factor\n            this.potato.setInteractive();\n            // Add click/tap event to make the potato bounce\n            this.potato.on(\"pointerdown\", this.bouncePotato, this);\n            // Add some initial velocity\n            this.potato.setVelocity(phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(-200, 200), 0);\n        }\n        // Add score text in the top center\n        this.scoreText = this.add.text(this.cameras.main.centerX, 20, \"Score: 0\", {\n            fontFamily: \"Arial\",\n            fontSize: \"24px\",\n            color: \"#ffffff\",\n            fontStyle: \"bold\",\n            align: \"center\"\n        }).setOrigin(0.5);\n        // Add lives display in the top right\n        this.createLivesDisplay();\n        // Add a simple fire indicator instead of full animation\n        const screenWidth = this.cameras.main.width;\n        this.add.rectangle(screenWidth / 2, this.cameras.main.height - 15, screenWidth, 30, 0xff3700).setAlpha(0.3);\n        // Delay creating the fire animation to prevent freezing on scene transition\n        this.time.delayedCall(500, ()=>{\n            this.createFireAnimation();\n        });\n        // Add text instructions\n        this.add.text(this.cameras.main.centerX, 60, \"Click/Tap the potato to bounce it!\", {\n            fontFamily: \"Arial\",\n            fontSize: \"18px\",\n            color: \"#ffffff\",\n            align: \"center\"\n        }).setOrigin(0.5);\n    }\n    update() {\n        if (this.potato) {\n            // Check if potato has fallen into the fire (about 50px from bottom)\n            if (this.potato.y > this.cameras.main.height - 50) {\n                // Add a cooking effect before losing a life\n                this.cookPotato();\n                return;\n            }\n            // Keep potato within bounds on left, right, and top\n            // Left boundary\n            if (this.potato.x < this.potato.width / 2) {\n                this.potato.x = this.potato.width / 2;\n                this.potato.setVelocityX(Math.abs(this.potato.body.velocity.x)); // Bounce back\n            }\n            // Right boundary\n            if (this.potato.x > this.cameras.main.width - this.potato.width / 2) {\n                this.potato.x = this.cameras.main.width - this.potato.width / 2;\n                this.potato.setVelocityX(-Math.abs(this.potato.body.velocity.x)); // Bounce back\n            }\n            // Top boundary\n            if (this.potato.y < this.potato.height / 2) {\n                this.potato.y = this.potato.height / 2;\n                this.potato.setVelocityY(Math.abs(this.potato.body.velocity.y)); // Bounce back\n            }\n        }\n    }\n    createLivesDisplay() {\n        // Clear any existing heart icons\n        this.heartIcons.forEach((heart)=>heart.destroy());\n        this.heartIcons = [];\n        // Create heart icons for each life\n        for(let i = 0; i < this.lives; i++){\n            const heart = this.add.image(this.cameras.main.width - 30 - i * 35, 30, \"heart\").setScale(0.8);\n            this.heartIcons.push(heart);\n        }\n    }\n    cookPotato() {\n        if (!this.potato) return;\n        // Disable interaction while cooking\n        this.potato.disableInteractive();\n        // Change potato tint to look like it's cooking\n        this.tweens.add({\n            targets: this.potato,\n            tint: 0x663300,\n            duration: 300,\n            yoyo: false,\n            onComplete: ()=>{\n                // Skip particles entirely and just use a simple visual effect\n                // Flash the potato red briefly\n                this.tweens.add({\n                    targets: this.potato,\n                    alpha: 0.7,\n                    duration: 100,\n                    yoyo: true,\n                    repeat: 2,\n                    onComplete: ()=>{\n                        // Shake the potato\n                        this.tweens.add({\n                            targets: this.potato,\n                            x: this.potato.x + 5,\n                            duration: 50,\n                            yoyo: true,\n                            repeat: 3,\n                            onComplete: ()=>{\n                                // Lose a life after the cooking animation\n                                this.loseLife();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n    createFireAnimation() {\n        // Clean up any existing fire particles\n        if (this.fireParticles) {\n            this.fireParticles.destroy();\n            this.fireEmitters = [];\n        }\n        const screenWidth = this.cameras.main.width;\n        // Just create a simple red rectangle at the bottom to represent fire\n        // No particles at all\n        const fireBase = this.add.rectangle(screenWidth / 2, this.cameras.main.height - 15, screenWidth, 30, 0xff3700).setAlpha(0.6);\n        // Add a darker base\n        const fireBaseDark = this.add.rectangle(screenWidth / 2, this.cameras.main.height - 5, screenWidth, 10, 0xaa0000).setAlpha(0.8);\n    }\n    loseLife() {\n        // Decrease lives\n        this.lives--;\n        // Update lives display\n        this.createLivesDisplay();\n        // Check if game over\n        if (this.lives <= 0) {\n            // Game over - pass the score to the game over scene\n            this.scene.start(\"GameOverScene\", {\n                score: this.score\n            });\n        } else {\n            // Reset potato position for next life\n            if (this.potato) {\n                this.potato.destroy();\n                this.potato = null;\n            }\n            // Show restart button\n            this.showRestartButton();\n        }\n    }\n    showRestartButton() {\n        // Create a continue button - position it above the fire\n        const continueButton = this.add.rectangle(this.cameras.main.centerX, this.cameras.main.centerY - 30, 200, 50, 0x4caf50 // Green color\n        ).setInteractive();\n        // Add button text\n        const buttonText = this.add.text(this.cameras.main.centerX, this.cameras.main.centerY - 30, \"CONTINUE (\".concat(this.lives, \" LIVES LEFT)\"), {\n            fontFamily: \"Arial\",\n            fontSize: \"16px\",\n            color: \"#ffffff\",\n            fontStyle: \"bold\",\n            align: \"center\"\n        }).setOrigin(0.5);\n        // Add hover effect\n        continueButton.on(\"pointerover\", ()=>{\n            continueButton.fillColor = 0x388e3c; // Darker green\n        });\n        continueButton.on(\"pointerout\", ()=>{\n            continueButton.fillColor = 0x4caf50; // Back to original green\n        });\n        // Add click event to restart the level\n        continueButton.on(\"pointerdown\", ()=>{\n            // Remove the button and text\n            continueButton.destroy();\n            buttonText.destroy();\n            // Create a new potato\n            this.potato = this.physics.add.sprite(this.cameras.main.centerX, this.cameras.main.centerY - 100, \"potato\");\n            // Set the potato's physics properties\n            if (this.potato) {\n                this.potato.setCollideWorldBounds(false);\n                this.potato.setBounce(0.6);\n                this.potato.setInteractive();\n                this.potato.on(\"pointerdown\", this.bouncePotato, this);\n                // Give a gentle initial velocity\n                const initialVelocityX = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(-100, 100);\n                this.potato.setVelocity(initialVelocityX, 0);\n            }\n        });\n    }\n    bouncePotato() {\n        if (this.potato) {\n            // Apply an upward impulse\n            this.potato.setVelocityY(-500); // Increased initial jump to compensate for higher gravity\n            // Add some random horizontal velocity\n            this.potato.setVelocityX(phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(-200, 200));\n            // Add a little spin for visual effect\n            this.tweens.add({\n                targets: this.potato,\n                angle: this.potato.angle + 360,\n                duration: 600,\n                ease: \"Cubic.easeOut\"\n            });\n            // Increment the score\n            this.score++;\n            // Update the score text\n            if (this.scoreText) {\n                this.scoreText.setText(\"Score: \".concat(this.score));\n            }\n        }\n    }\n    constructor(){\n        super(\"BouncingBallScene\"), this.potato = null, this.lives = 3, this.livesText = null, this.score = 0, this.scoreText = null, this.heartIcons = [], this.fireParticles = null, this.fireEmitters = [];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/potato/scenes/BouncingBallScene.ts\n"));

/***/ })

});